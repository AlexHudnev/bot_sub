# bot.py
import os
import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import aiosqlite
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
import asyncio
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
TRIAL_DAYS = int(os.getenv("TRIAL_DAYS", "7"))
WELCOME_VIDEO_FILE_ID = os.getenv("WELCOME_VIDEO_FILE_ID")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# ========================
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# ========================
class AdminAction(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_days = State()
    waiting_for_user_id_for_extend = State()

# ========================
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# ========================
async def init_db():
    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                trial_used BOOLEAN DEFAULT 0,
                created_at TEXT DEFAULT (datetime('now'))
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                expires_at TEXT,
                status TEXT DEFAULT 'active',
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        """)
        await db.commit()

async def create_or_get_user(telegram_id: int, username: str, first_name: str, last_name: str) -> bool:
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute(
            """INSERT OR IGNORE INTO users 
               (telegram_id, username, first_name, last_name) 
               VALUES (?, ?, ?, ?)""",
            (telegram_id, username, first_name, last_name)
        )
        await db.commit()
        return cursor.rowcount > 0

async def set_trial_used(user_id: int):
    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute("UPDATE users SET trial_used = 1 WHERE id = ?", (user_id,))
        await db.commit()

async def add_subscription(user_id: int, days: int):
    expires = datetime.utcnow() + timedelta(days=days)
    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute(
            "INSERT INTO subscriptions (user_id, expires_at) VALUES (?, ?)",
            (user_id, expires.isoformat())
        )
        await db.commit()

async def get_user_by_telegram(telegram_id: int) -> Optional[dict]:
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("SELECT id, trial_used FROM users WHERE telegram_id = ?", (telegram_id,))
        row = await cursor.fetchone()
        return {"id": row[0], "trial_used": bool(row[1])} if row else None

async def get_user_full_info(telegram_id: int):
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute(
            "SELECT first_name, last_name, username FROM users WHERE telegram_id = ?",
            (telegram_id,)
        )
        row = await cursor.fetchone()
        if row:
            first, last, username = row
            name_parts = [n for n in [first, last] if n]
            display_name = " ".join(name_parts) or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            if username:
                display_name += f" (@{username})"
            return {"display_name": display_name}
        return None

async def get_active_subscribers():
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("""
            SELECT u.telegram_id, u.first_name, u.last_name, u.username, s.expires_at 
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active'
        """)
        return await cursor.fetchall()

# ========================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º
# ========================
async def add_to_channel(telegram_id: int):
    try:
        await bot.add_chat_member(chat_id=CHANNEL_ID, user_id=telegram_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: {telegram_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {telegram_id}: {e}")
        try:
            invite = await bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                member_limit=1,
                expire_date=int((datetime.utcnow() + timedelta(hours=1)).timestamp())
            )
            await bot.send_message(telegram_id, f"‚ú® –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É:\n{invite.invite_link}")
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å invite link: {ex}")

async def remove_from_channel(telegram_id: int):
    try:
        await bot.ban_chat_member(chat_id=CHANNEL_ID, user_id=telegram_id)
        await asyncio.sleep(1)
        await bot.unban_chat_member(chat_id=CHANNEL_ID, user_id=telegram_id)
        logger.info(f"–£–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞: {telegram_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {telegram_id}: {e}")

# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ========================
@router.message(Command("start"))
async def cmd_start(message: Message):
    user = message.from_user
    is_new = await create_or_get_user(
        user.id,
        user.username or "",
        user.first_name or "",
        user.last_name or ""
    )

    if is_new and WELCOME_VIDEO_FILE_ID:
        video_id = WELCOME_VIDEO_FILE_ID.strip()
        if video_id.startswith("BAAC"):
            try:
                await message.answer_video(
                    video=video_id,
                    caption="üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—Å–∞–ª–æ–Ω!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

    welcome_text = (
        "üåü –û–Ω–ª–∞–π–Ω-—Å–∞–ª–æ–Ω \"–£–º–Ω—ã–π –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä\" üåü\n\n"
        "–¶–µ–Ω–∞: 299 RUB\n"
        "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "---\n\n"
        "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ:\n"
        "  –†–∞–±–æ—á–∏–µ –ª–∞–π—Ñ—Ö–∞–∫–∏, –∑–Ω–∞–Ω–∏—è –ø–æ –¥–æ–º–∞—à–Ω–∏–º –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è–º, —É–∫–ª–∞–¥–∫–∞–º –∏ —É—Ö–æ–¥—É.\n\n"
        "‚Ä¢ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n"
        "  –í–µ–¥—É—â–∏–µ —Å—Ç–∏–ª–∏—Å—Ç—ã –∏ –∫–æ–ª–æ—Ä–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.\n\n"
        "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n"
        "  –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "---\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:\n"
        "–¢—ã —Å–∞–º —Ä–µ—à–∞–µ—à—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ –Ω–µ—Ç."
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial")
    kb.button(text="üí∞ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_disabled")
    kb.adjust(1)

    await message.answer(welcome_text, reply_markup=kb.as_markup())

@router.callback_query(lambda c: c.data == "trial")
async def trial_handler(callback: types.CallbackQuery):
    user = await get_user_by_telegram(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)
        return

    if user["trial_used"]:
        await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        return

    await set_trial_used(user["id"])
    await add_subscription(user["id"], TRIAL_DAYS)
    
    # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    invite_link = await get_invite_link()

    # –ë–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É –¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ InlineKeyboard
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –í–æ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", url=invite_link)
    kb.adjust(1)

    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {TRIAL_DAYS} –¥–Ω—è(–µ–π) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:",
        reply_markup=kb.as_markup()
    )

async def get_invite_link() -> str:
    """–°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é invite-—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        invite = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,  # —Ç–æ–ª—å–∫–æ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            expire_date=int((datetime.utcnow() + timedelta(hours=24)).timestamp())
        )
        return invite.invite_link
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å invite link: {e}")
        return "https://t.me"

@router.callback_query(lambda c: c.data == "subscribe_disabled")
async def subscribe_disabled(callback: types.CallbackQuery):
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)

# ========================
# –ê–¥–º–∏–Ω–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
# ========================
def get_admin_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add")
    kb.button(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_extend")
    kb.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="admin_list")
    kb.adjust(1)
    return kb.as_markup()

@router.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())

@router.callback_query(lambda c: c.data == "admin_add")
async def admin_add_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(AdminAction.waiting_for_user_id)

@router.callback_query(lambda c: c.data == "admin_extend")
async def admin_extend_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminAction.waiting_for_user_id_for_extend)

@router.callback_query(lambda c: c.data == "admin_list")
async def admin_list_subs(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return
    subs = await get_active_subscribers()
    if not subs:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
    else:
        text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:</b>\n\n"
        for tg_id, first, last, username, exp in subs:
            name_parts = [part for part in [first, last] if part]
            display_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            if username:
                display_name += f" (@{username})"
            text += f"‚Ä¢ {display_name} [<code>{tg_id}</code>] –¥–æ {exp.split('T')[0]}\n"
    await callback.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=get_admin_menu())

@router.message(AdminAction.waiting_for_user_id)
async def admin_add_user_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        user_id = int(message.text.strip())
        await add_to_channel(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.", reply_markup=get_admin_menu())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:", reply_markup=get_admin_menu())
    await state.clear()

@router.message(AdminAction.waiting_for_user_id_for_extend)
async def admin_extend_user_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        user_id = int(message.text.strip())
        await state.update_data(target_user_id=user_id)
        await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å?")
        await state.set_state(AdminAction.waiting_for_days)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")
        return

@router.message(AdminAction.waiting_for_days)
async def admin_extend_days(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        days = int(message.text.strip())
        data = await state.get_data()
        user_id = data["target_user_id"]

        user = await get_user_by_telegram(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu())
        else:
            await add_subscription(user["id"], days)
            await add_to_channel(user_id)
            user_info = await get_user_full_info(user_id)
            name = user_info["display_name"] if user_info else f"ID {user_id}"
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {name} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.", reply_markup=get_admin_menu())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
        return
    await state.clear()

# ========================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
# ========================
async def check_subscriptions():
    subscribers = await get_active_subscribers()
    now = datetime.utcnow()
    tomorrow = now + timedelta(days=1)

    for telegram_id, _, _, _, expires_at in subscribers:
        expires = datetime.fromisoformat(expires_at)
        if expires < now:
            async with aiosqlite.connect("/db/bot.db") as db:
                await db.execute("""
                    UPDATE subscriptions SET status = 'expired'
                    WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
                """, (telegram_id,))
                await db.commit()
            await remove_from_channel(telegram_id)
            try:
                await bot.send_message(telegram_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            except:
                pass

    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("""
            SELECT u.telegram_id, u.first_name, u.last_name, u.username
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active'
              AND date(s.expires_at) = date(?)
        """, (tomorrow.isoformat(),))
        rows = await cursor.fetchall()

        for telegram_id, first, last, username in rows:
            name_parts = [n for n in [first, last] if n]
            name = " ".join(name_parts) or "–î–æ–±—Ä—ã–π —á–µ–ª–æ–≤–µ–∫"
            try:
                await bot.send_message(
                    telegram_id,
                    f"üîî –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ¬´–£–º–Ω—ã–π –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä¬ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –≤ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardBuilder()
                    .button(text="üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_disabled")
                    .as_markup()
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {telegram_id}: {e}")

# ========================
# –ó–∞–ø—É—Å–∫
# ========================

async def main():
    await init_db()
    scheduler = AsyncIOScheduler()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 UTC (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    scheduler.add_job(check_subscriptions, "cron", hour=9, minute=0)
    # –ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ–µ–≤)
    scheduler.add_job(check_subscriptions, IntervalTrigger(hours=6))
    scheduler.start()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())