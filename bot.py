import os
import logging
from datetime import datetime, timedelta
import random
from typing import Optional
import asyncio
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import (
    Message, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery, SuccessfulPayment
)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import aiosqlite
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
TRIAL_DAYS = int(os.getenv("TRIAL_DAYS", "2"))
WELCOME_VIDEO_FILE_ID = os.getenv("WELCOME_VIDEO_FILE_ID")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []

PROVIDER_TOKEN_YOOKASSA = os.getenv("PROVIDER_TOKEN_YOOKASSA")
PROVIDER_TOKEN_STRIPE = os.getenv("PROVIDER_TOKEN_STRIPE")
ITEMS_PER_PAGE = 20

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class PaymentState(StatesGroup):
    waiting_for_payment_method = State()

class AdminAction(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_days = State()
    waiting_for_user_id_for_extend = State()

# === –ë–î ===
async def init_db():
    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                trial_used BOOLEAN DEFAULT 0,
                created_at TEXT DEFAULT (datetime('now'))
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                expires_at TEXT,
                status TEXT DEFAULT 'active',
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_payment_charge_id TEXT UNIQUE,
                user_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                months INTEGER NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TEXT DEFAULT (datetime('now')),
                updated_at TEXT DEFAULT (datetime('now')),
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        """)
        await db.commit()

async def create_or_get_user(telegram_id: int, username: str, first_name: str, last_name: str) -> bool:
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute(
            """INSERT OR IGNORE INTO users 
               (telegram_id, username, first_name, last_name) 
               VALUES (?, ?, ?, ?)""",
            (telegram_id, username, first_name, last_name)
        )
        await db.commit()
        return cursor.rowcount > 0

async def set_trial_used(user_id: int):
    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute("UPDATE users SET trial_used = 1 WHERE id = ?", (user_id,))
        await db.commit()

async def add_subscription(user_id: int, days: int):
    expires = datetime.utcnow() + timedelta(days=days)
    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute(
            "INSERT INTO subscriptions (user_id, expires_at) VALUES (?, ?)",
            (user_id, expires.isoformat())
        )
        await db.commit()

async def get_user_by_telegram(telegram_id: int) -> Optional[dict]:
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("SELECT id, trial_used FROM users WHERE telegram_id = ?", (telegram_id,))
        row = await cursor.fetchone()
        return {"id": row[0], "trial_used": bool(row[1])} if row else None

async def get_user_full_info(telegram_id: int):
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute(
            "SELECT first_name, last_name, username FROM users WHERE telegram_id = ?",
            (telegram_id,)
        )
        row = await cursor.fetchone()
        if row:
            first, last, username = row
            name_parts = [n for n in [first, last] if n]
            display_name = " ".join(name_parts) or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            if username:
                display_name += f" (@{username})"
            return {"display_name": display_name}
        return None

async def get_active_subscribers():
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("""
            SELECT u.telegram_id, u.first_name, u.last_name, u.username, s.expires_at 
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active'
        """)
        return await cursor.fetchall()

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º ===
async def get_invite_link() -> str:
    try:
        invite = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            expire_date=int((datetime.utcnow() + timedelta(hours=24)).timestamp())
        )
        return invite.invite_link
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å invite link: {e}")
        return "https://web.telegram.org/k/#5411737851"

async def send_invite_button(user_id: int, text: str = "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"):
    try:
        invite_link = await get_invite_link()
        kb = InlineKeyboardBuilder()
        kb.button(text="üîó –í–æ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª", url=invite_link)
        kb.adjust(1)
        await bot.send_message(user_id, text, reply_markup=kb.as_markup())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å invite –∫–Ω–æ–ø–∫—É {user_id}: {e}")

async def activate_subscription(telegram_id: int, days: int):
    user = await get_user_by_telegram(telegram_id)
    if user:
        await add_subscription(user["id"], days)

async def remove_from_channel(telegram_id: int):
    try:
        await bot.ban_chat_member(chat_id=CHANNEL_ID, user_id=telegram_id)
        await asyncio.sleep(1)
        await bot.unban_chat_member(chat_id=CHANNEL_ID, user_id=telegram_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {telegram_id}: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = message.from_user
    is_new = await create_or_get_user(
        user.id,
        user.username or "",
        user.first_name or "",
        user.last_name or ""
    )

    if is_new and WELCOME_VIDEO_FILE_ID:
        video_id = WELCOME_VIDEO_FILE_ID.strip()
        if video_id.startswith("BAAC"):
            try:
                await message.answer_video(video=video_id, caption="üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—Å–∞–ª–æ–Ω!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {e}")

    welcome_text = (
        "üåü –û–Ω–ª–∞–π–Ω-—Å–∞–ª–æ–Ω \"–£–º–Ω—ã–π –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä\" üåü\n\n"
        "–¶–µ–Ω–∞: –æ—Ç 299 RUB / 3 USD\n"
        "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "---\n\n"
        "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ\n"
        "‚Ä¢ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∏–ª–∏—Å—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "---\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ‚Äî —Ç—ã —Å–∞–º —Ä–µ—à–∞–µ—à—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –æ–ø–ª–∞—Ç—É."
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial")
    kb.button(text="üí∞ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="select_duration")
    kb.adjust(1)
    await message.answer(welcome_text, reply_markup=kb.as_markup())

@router.callback_query(lambda c: c.data == "start")
async def back_to_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cmd_start(callback.message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "trial")
async def trial_handler(callback: types.CallbackQuery):
    user = await get_user_by_telegram(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)
        return
    if user["trial_used"]:
        await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        return
    await set_trial_used(user["id"])
    await add_subscription(user["id"], TRIAL_DAYS)
    await send_invite_button(callback.from_user.id, f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {TRIAL_DAYS} –¥–Ω—è(–µ–π) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

@router.callback_query(lambda c: c.data == "select_duration")
async def select_duration(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    for months in [1, 3]:
        kb.button(text=f"{months} –º–µ—Å", callback_data=f"duration_{months}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
    kb.adjust(1)
    await callback.message.edit_text("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞?", reply_markup=kb.as_markup())
    await state.set_state(PaymentState.waiting_for_payment_method)

@router.callback_query(lambda c: c.data == "subscribe_disabled")
async def subscribe_disabled(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    for months in [1, 3]:
        kb.button(text=f"{months} –º–µ—Å", callback_data=f"duration_{months}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
    kb.adjust(1)
    await callback.message.edit_text("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞?", reply_markup=kb.as_markup())
    await state.set_state(PaymentState.waiting_for_payment_method)

@router.callback_query(lambda c: c.data.startswith("duration_"))
async def choose_payment_method(callback: types.CallbackQuery, state: FSMContext):
    try:
        months = int(callback.data.split("_", 1)[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞.", show_alert=True)
        return

    await state.update_data(months=months)

    kb = InlineKeyboardBuilder()
    kb.button(text="üá∑üá∫ –ÆKassa (RUB)", callback_data="pay_yookassa")
    # kb.button(text="üåç Stripe (USD)", callback_data="pay_stripe")
    kb.button(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://web.telegram.org/k/#5411737851")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_duration")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb.as_markup())


def pluralize_months(n: int) -> str:
    if n % 100 in (11, 12, 13, 14):
        return "–º–µ—Å—è—Ü–µ–≤"
    last_digit = n % 10
    if last_digit == 1:
        return "–º–µ—Å—è—Ü"
    elif last_digit in (2, 3, 4):
        return "–º–µ—Å—è—Ü–∞"
    else:
        return "–º–µ—Å—è—Ü–µ–≤"


@router.callback_query(lambda c: c.data in ["pay_yookassa", "pay_stripe"])
async def send_invoice_by_method(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    months = data.get("months")
    if not months:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return

    # –¶–µ–Ω—ã –ø–æ —Å—Ä–æ–∫—É
    rub_prices = {1: 299, 3: 799, 6: 1499, 12: 2499}
    usd_prices = {1: 3, 3: 8, 6: 15, 12: 25}

    provider_key = callback.data
    if provider_key == "pay_yookassa":
        price = rub_prices.get(months, 299)
        currency = "RUB"
        provider_token = PROVIDER_TOKEN_YOOKASSA
    else:  # pay_stripe
        price = usd_prices.get(months, 3)
        currency = "USD"
        provider_token = PROVIDER_TOKEN_STRIPE

    if not provider_token:
        await callback.answer("–ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", show_alert=True)
        return

    title = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å"
    description = f"–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ {months} {pluralize_months(months)}"
    payload = f"sub_{callback.from_user.id}_{months}_{provider_key}"
    prices = [LabeledPrice(label=title, amount=price * 100)]

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        start_parameter=f"sub_{months}_{provider_key}",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )
    await callback.answer()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π ===
@router.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(lambda m: m.content_type == "successful_payment")
async def successful_payment_handler(message: Message):
    payment = message.successful_payment
    payload = payment.invoice_payload  # "sub_12345_3_pay_yookassa"
    parts = payload.split("_")
    if len(parts) < 4:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: {payload}")
        return

    try:
        user_id = int(parts[1])
        months = int(parts[2])
    except (ValueError, IndexError):
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ payload: {payload}")
        return

    amount = payment.total_amount / 100
    charge_id = payment.telegram_payment_charge_id

    async with aiosqlite.connect("/db/bot.db") as db:
        await db.execute(
            """INSERT INTO payments 
               (telegram_payment_charge_id, user_id, amount, months, status) 
               VALUES (?, ?, ?, ?, 'paid')""",
            (charge_id, user_id, amount, months)
        )
        await db.commit()

    await activate_subscription(user_id, months * 30)
    await send_invite_button(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

# === –ê–¥–º–∏–Ω–∫–∞ ===
def get_admin_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add")
    kb.button(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_extend")
    kb.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="admin_list")
    kb.adjust(1)
    return kb.as_markup()

@router.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu())

@router.callback_query(lambda c: c.data == "admin_add")
async def admin_add_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminAction.waiting_for_user_id)

@router.callback_query(lambda c: c.data == "admin_extend")
async def admin_extend_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminAction.waiting_for_user_id_for_extend)

def get_pagination_keyboard(current_page: int, total_pages: int):
    builder = InlineKeyboardBuilder()
    buttons = []

    if total_pages > 1:
        if current_page > 1:
            buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_list_page:{current_page - 1}"))
        if current_page < total_pages:
            buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_list_page:{current_page + 1}"))

    if buttons:
        builder.row(*buttons)

    builder.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu"))
    return builder.as_markup()


async def format_subscriptions_page(subs, page: int, total_pages: int) -> str:
    text = f"<b>–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏</b> (—Å—Ç—Ä. {page}/{total_pages})\n\n"
    if not subs:
        return text + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    for tg_id, first, last, username, expires_at, status in subs:
        # –ò–º—è
        name_parts = [part for part in [first, last] if part]
        display_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        if username:
            display_name += f" (@{username})"

        # –î–∞—Ç–∞
        date_str = expires_at.split("T")[0] if "T" in expires_at else expires_at

        # –°—Ç–∞—Ç—É—Å
        status_display = {
            "active": "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞",
            "expired": "‚ùå –∏—Å—Ç–µ–∫–ª–∞",
        }.get(status, f"‚ÑπÔ∏è {status}")

        text += (
            f"‚Ä¢ {display_name} [<code>{tg_id}</code>]\n"
            f"  –¥–æ {date_str} ‚Äî {status_display}\n\n"
        )
    return text

async def fetch_all_subscriptions():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –ë–î."""
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("""
            SELECT 
                u.telegram_id,
                u.first_name,
                u.last_name,
                u.username,
                s.expires_at,
                s.status
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            ORDER BY s.expires_at DESC
        """)
        return await cursor.fetchall()

@router.callback_query(lambda c: c.data == "admin_list")
async def admin_list_subs(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    all_subs = await fetch_all_subscriptions()
    total = len(all_subs)
    total_pages = max(1, (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)

    if total == 0:
        await callback.message.edit_text("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ.", reply_markup=get_admin_menu())
        await callback.answer()
        return

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    page_subs = all_subs[:ITEMS_PER_PAGE]
    text = await format_subscriptions_page(page_subs, page=1, total_pages=total_pages)
    # –û–±—Ö–æ–¥ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
    text += f"\u200B{random.randint(1, 999999)}"

    await callback.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_pagination_keyboard(1, total_pages)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("admin_list_page:"))
async def admin_list_page_handler(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    try:
        page = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
        return

    all_subs = await fetch_all_subscriptions()
    total = len(all_subs)
    total_pages = max(1, (total + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)

    if page < 1 or page > total_pages:
        await callback.answer("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_subs = all_subs[start:end]

    text = await format_subscriptions_page(page_subs, page, total_pages)
    text += f"\u200B{random.randint(1, 999999)}"  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å

    await callback.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_pagination_keyboard(page, total_pages)
    )
    await callback.answer()

@router.message(AdminAction.waiting_for_user_id)
async def admin_add_user_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        user_id = int(message.text.strip())
        await send_invite_button(user_id, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É!")
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_admin_menu())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:", reply_markup=get_admin_menu())
    await state.clear()

@router.message(AdminAction.waiting_for_user_id_for_extend)
async def admin_extend_user_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        user_id = int(message.text.strip())
        await state.update_data(target_user_id=user_id)
        await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å?")
        await state.set_state(AdminAction.waiting_for_days)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")
        return

@router.message(AdminAction.waiting_for_days)
async def admin_extend_days(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        days = int(message.text.strip())
        data = await state.get_data()
        user_id = data["target_user_id"]
        user = await get_user_by_telegram(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu())
        else:
            await add_subscription(user["id"], days)
            await send_invite_button(user_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.")
            user_info = await get_user_full_info(user_id)
            name = user_info["display_name"] if user_info else f"ID {user_id}"
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {name} –ø—Ä–æ–¥–ª–µ–Ω–∞.", reply_markup=get_admin_menu())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
        return
    await state.clear()


async def has_active_subscription_by_telegram(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π) –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ telegram_id."""
    now_iso = datetime.utcnow().isoformat()
    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("""
            SELECT 1
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE u.telegram_id = ? AND s.expires_at > ? AND s.status = 'active'
            LIMIT 1
        """, (telegram_id, now_iso))
        return await cursor.fetchone() is not None

# === –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ===
async def check_subscriptions():
    now = datetime.utcnow()
    tomorrow = now + timedelta(days=1)

    subscribers = await get_active_subscribers()
    for telegram_id, _, _, _, expires_at in subscribers:
        expires = datetime.fromisoformat(expires_at)
        if expires < now:
            async with aiosqlite.connect("/db/bot.db") as db:
                await db.execute("""
                    UPDATE subscriptions SET status = 'expired'
                    WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
                """, (telegram_id,))
                await db.commit()
            
            has_new_sub = await has_active_subscription_by_telegram(telegram_id)
            if has_new_sub:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ {telegram_id}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
                continue
            await remove_from_channel(telegram_id)
            try:
                await bot.send_message(telegram_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            except:
                pass

    async with aiosqlite.connect("/db/bot.db") as db:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö:
        # - –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ expired –ø–æ–¥–ø–∏—Å–∫–∞,
        # - –∏ –ù–ï–¢ –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π (—Å—Ç–∞—Ç—É—Å 'active' –ò expires_at >= now)
        cursor = await db.execute("""
            SELECT DISTINCT u.telegram_id
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'expired'
              AND NOT EXISTS (
                  SELECT 1 FROM subscriptions s2
                  JOIN users u2 ON s2.user_id = u2.id
                  WHERE u2.telegram_id = u.telegram_id
                    AND s2.status = 'active'
                    AND datetime(s2.expires_at) >= datetime(?)
              )
        """, (now.isoformat(),))
        expired_without_active = await cursor.fetchall()

        for (telegram_id,) in expired_without_active:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
            if not await has_active_subscription_by_telegram(telegram_id):
                logger.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {telegram_id} (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)")
                await remove_from_channel(telegram_id)
                try:
                    await bot.send_message(telegram_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {telegram_id}: {e}")


    async with aiosqlite.connect("/db/bot.db") as db:
        cursor = await db.execute("""
            SELECT u.telegram_id, u.first_name, u.last_name
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active'
              AND date(s.expires_at) = date(?)
        """, (tomorrow.isoformat(),))
        rows = await cursor.fetchall()

        for telegram_id, first, last in rows:
            name = (first or "") + (" " + last if last else "")
            name = name.strip() or "–î–æ–±—Ä—ã–π —á–µ–ª–æ–≤–µ–∫"
            try:
                kb = InlineKeyboardBuilder()
                kb.button(text="üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="select_duration")
                await bot.send_message(
                    telegram_id,
                    f"üîî –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞.\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å?",
                    reply_markup=kb.as_markup()
                )
            except Exception as e:
                logger.error(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}: {e}")


async def send_one_time_expired_notifications():
    """–û–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–º, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏ –Ω–µ—Ç –Ω–æ–≤–æ–π."""
    now_iso = datetime.utcnow().isoformat()
    async with aiosqlite.connect("/db/bot.db") as db:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (status = 'active', –Ω–æ expires_at < now)
        cursor = await db.execute("""
            SELECT DISTINCT u.telegram_id
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active' AND s.expires_at < ?
        """, (now_iso,))
        expired_users = await cursor.fetchall()

        for (telegram_id,) in expired_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è (–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è) –ø–æ–¥–ø–∏—Å–∫–∞
            has_active = await has_active_subscription_by_telegram(telegram_id)
            if has_active:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ‚Äî –µ—Å—Ç—å –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

            try:
                kb = InlineKeyboardBuilder()
                kb.button(text="üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="select_duration")
                await bot.send_message(
                    telegram_id,
                    "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø?",
                    reply_markup=kb.as_markup()
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {telegram_id}: {e}")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await init_db()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_subscriptions, CronTrigger(hour=9, minute=0))
    scheduler.add_job(check_subscriptions, IntervalTrigger(hours=6))
    scheduler.start()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())